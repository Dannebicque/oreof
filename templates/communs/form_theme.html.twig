{% use "bootstrap_5_layout.html.twig" %}
{% trans_default_domain 'form' %}

{%- block form_row -%}
    {%- if compound is defined and compound -%}
        {%- set element = 'fieldset' -%}
    {%- endif -%}
    {%- set widget_attr = {} -%}
    {%- if help is not empty -%}
        {%- set widget_attr = {attr: {'aria-describedby': id ~"_help"}} -%}
    {%- endif -%}
    {%- set row_class = row_class|default(row_attr.class|default('mb-1')|trim) -%}
    <{{ element|default('div') }}{% with {attr: row_attr|merge({class: row_class})} %}{{ block('attributes') }}{% endwith %}>
    {%- if 'form-floating' in row_class -%}
        {{- form_widget(form, widget_attr) -}}
        {{- form_label(form) -}}
    {%- else -%}
        {{- form_label(form) -}}
        {{- form_widget(form, widget_attr) -}}
    {%- endif -%}
    {{- form_help(form) -}}
    {{- form_errors(form) -}}
    </{{ element|default('div') }}>
{%- endblock form_row %}

{% block trix_widget %}
    <input id="trix-input-{{ trixId }}" value="{{ value }}" type="hidden" name="{{ full_name }}">
    <trix-editor input="trix-input-{{ trixId }}"></trix-editor>
{% endblock %}

{%- block form_widget_simple -%}
    {% if input_prefix is defined or input_suffix is defined %}
        <div class="input-group">
            {% if input_prefix %}
                {{ input_prefix | raw }}
            {% endif %}
            {{- parent() -}}
            {% if input_suffix %}
                {{ input_suffix | raw }}
            {% endif %}
        </div>
    {% else %}
        {{- parent() -}}
    {% endif %}
{%- endblock form_widget_simple -%}

{% macro form_parent_name(form, prefix) %}
    {% apply spaceless %}
        {% import _self as macros %}

        {% set prefix = prefix|default(false) %}

        {% if form.parent is empty %}
            {{- form.vars.name -}}.labels
        {% else %}
            {% if form.vars.compound and not prefix %}
                {{- macros.form_parent_name(form.parent) -}}.{{- form.vars.name -}}.label
            {% else %}
                {{- macros.form_parent_name(form.parent, true) -}}.{{- form.vars.name -}}
            {% endif %}
        {% endif %}
    {% endapply %}
{% endmacro %}

{% macro form_parent_help_name(form, prefix) %}
    {% apply spaceless %}
        {% import _self as macros %}

        {% set prefix = prefix|default(false) %}

        {% if form.parent is empty %}
            {{- form.vars.name -}}.helps
        {% else %}
            {% if form.vars.compound and not prefix %}
                {{- macros.form_parent_help_name(form.parent) -}}.{{- form.vars.name -}}.help
            {% else %}
                {{- macros.form_parent_help_name(form.parent, true) -}}.{{- form.vars.name -}}
            {% endif %}
        {% endif %}
    {% endapply %}
{% endmacro %}


{% block entity_with_add_row %}
    <div {{ stimulus_controller('entity_with_add') }}>
        {{- form_row(form) -}}
    </div>
{% endblock %}

{% block entity_with_add_widget %}
    <div class="row">
        <div class="col-10">
            {{ block('choice_widget') }}
        </div>
        <div class="col-2">
            <div class="d-grid" style="height: 100%">
                <button
                        {{ stimulus_action('entity_with_add', 'showAdd', 'click') }}
                        type="button"
                        class="btn btn-success d-block"
                        style="height: 100%"
                >
                    <i class="{{ iconAdd }}"></i> Ajouter
                </button>
            </div>
        </div>
    </div>
    <div class="row mt-2 d-none" {{ stimulus_target('entity_with_add', 'zoneAdd') }}>
        <div class="col-10">
            <label for="{{ name_field_to_add }}" class="sr-only">{{ name_field_to_add }}</label>
            <input type="text" class="form-control" name="{{ name_field_to_add }}" id="{{ name_field_to_add }}">
            <span class="form-text mb-0 help-text">{{ help_to_add }}</span>
        </div>
        <div class="col-2">
            &nbsp;
        </div>
    </div>
{% endblock %}

{% block textarea_with_save_row %}
    {%- set widget_attr = {} -%}
    {%- if help is not empty -%}
        {%- set widget_attr = {attr: {'aria-describedby': id ~"_help"}} -%}
    {%- endif -%}
    <div{% with {attr: row_attr} %}{{ block('attributes') }}{% endwith %} {% if button_disabled == false %}{{
    stimulus_controller('textarea') }}{% endif %} class="mt-3">
        {{- form_label(form) -}}
        {{- form_errors(form) -}}
        {{- form_widget(form, widget_attr) -}}
        {%- if help is not empty -%}
            {%- set help_attr = help_attr|merge({class: (help_attr.class|default('') ~ ' text-small')|trim}) -%}
            <div id="{{ id }}_help"{% with { attr: help_attr } %}{{ block('attributes') }}{% endwith %}>
                <span {{ stimulus_target('textarea', 'texte') }} class="text-small text-secondary"></span>
            </div>
        {%- endif -%}
    </div>
{% endblock %}

{%- block form_label -%}
    {% if label is not same as(false) -%}
        {%- set parent_label_class = parent_label_class|default(label_attr.class|default('')) -%}
        {%- if compound is defined and compound -%}
            {%- set element = 'legend' -%}
            {%- if 'col-form-label' not in parent_label_class -%}
                {%- set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' col-form-label' )|trim}) -%}
            {%- endif -%}
        {%- else -%}
            {%- set row_class = row_class|default(row_attr.class|default('')) -%}
            {%- set label_attr = label_attr|merge({for: id}) -%}
            {%- if 'col-form-label' not in parent_label_class -%}
                {%- set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ('input-group' in row_class ? ' input-group-text' : ' form-label') )|trim}) -%}
            {%- endif -%}
        {%- endif -%}
    {%- endif -%}
    <{{ element|default('label') }}{% if label_attr %}{% with { attr: label_attr } %}{{ block('attributes') }}{% endwith %}{% endif %}>
    {{- block('form_label_content') -}}
    {% import _self as macros %}

    {#    {% if help is defined and help != '' %} #}
    {% set help = macros.form_parent_help_name(form) %}
    <i class="fal fa-question-circle ms-1"
            {{ stimulus_controller('tooltip', {
                'placement': 'bottom',
            }) }}
       title="{{ help|trim|trans({}, 'help')|raw }}"></i>
    </{{ element|default('label') }}>
{%- endblock form_label %}

{% block textarea_with_save_widget %}
    <div class="row">
        <div class="col-11">
            {{ block('textarea_widget') }}
        </div>
        <div class="col-1">
            <div class="d-grid" style="height: 100%">
                <button
                        type="button"
                        {{ button_disabled == true ? 'disabled' : '' }}
                        class="btn btn-success d-block"
                        style="height: 100%"
                        {{ button_action }}
                >Enregistrer
                </button>
            </div>
        </div>
    </div>

{% endblock %}

{% block textarea_auto_save_widget %}
    {#    <textarea {{ block('widget_attributes') }}>{{ value }}</textarea> #}
    <input id="trix-input-{{ trixId }}" value="{{ value }}" type="hidden" name="{{ full_name }}">
    <trix-editor input="trix-input-{{ trixId }}" {{ block('widget_attributes') }}></trix-editor>
{% endblock %}

{% block textarea_auto_save_row %}
    {%- set widget_attr = {} -%}
    {%- if help is not empty -%}
        {%- set widget_attr = {attr: {'aria-describedby': id ~"_help"}} -%}
    {%- endif -%}
    <div{% with {attr: row_attr} %}{{ block('attributes') }}{% endwith %} {{ stimulus_controller('textarea', {
        'maxLength': maxLength,
    }) }}
            class="mt-3">
        {{- form_label(form) -}}
        {{- form_errors(form) -}}
        {{- form_widget(form, widget_attr) -}}
        {%- if help is not empty -%}
            {%- set help_attr = help_attr|merge({class: (help_attr.class|default('') ~ ' text-small')|trim}) -%}
            <div id="{{ id }}_help"{% with { attr: help_attr } %}{{ block('attributes') }}{% endwith %}>
                <span {{ stimulus_target('textarea', 'texte') }} class="text-secondary"></span>
            </div>
        {%- endif -%}
    </div>
{% endblock %}

{%- block checkbox_radio_label -%}
    {#- Do not display the label if widget is not defined in order to prevent double label rendering -#}
    {%- if widget is defined -%}
        {%- set label_attr_class = label_attr_class|default(label_attr.class|default('')) -%}
        {%- if 'btn' not in label_attr_class -%}
            {%- set label_attr_class = label_attr_class ~ ' form-check-label' -%}
        {%- endif -%}
        {%- set label_attr = label_attr|merge({class: label_attr_class|trim}) -%}
        {%- if not compound -%}
            {% set label_attr = label_attr|merge({'for': id}) %}
        {%- endif -%}
        {#        {%- if required -%} #}
        {#            {%- set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' required')|trim}) -%} #}
        {#        {%- endif -%} #}
        {%- if parent_label_class is defined -%}
            {%- set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' ' ~ parent_label_class)|replace({'checkbox-inline': '', 'radio-inline': ''})|trim}) -%}
        {%- endif -%}

        {{ widget|raw }}
        <label{% with { attr: label_attr } %}{{ block('attributes') }}{% endwith %}>
            {%- if label is not same as(false) -%}
                {{- block('form_label_content') -}}
            {%- endif -%}
        </label>
    {%- endif -%}
{%- endblock checkbox_radio_label %}

{% block form_help -%}
    {%- if help is not empty -%}
        {%- set help_attr = help_attr|merge({class: (help_attr.class|default('') ~ ' help-text')|trim}) -%}
        <div id="{{ id }}_help"{% with { attr: help_attr } %}{{ block('attributes') }}{% endwith %}>
        </div>
    {%- endif -%}
{%- endblock form_help %}

{%- block form_label_content -%}
    {% import _self as macros %}
    {% apply spaceless %}
        {%- if label is empty -%}
            {% set label = macros.form_parent_name(form) %}
        {%- endif -%}
        {%- if translation_domain is same as(false) -%}
            {%- if label_html is same as(false) -%}
                {{- label -}}
            {%- else -%}
                {{- label|raw -}}
            {%- endif -%}
        {%- else -%}
            {%- if label_html is same as(false) -%}
                {{- label|trim|trans(label_translation_parameters, translation_domain) -}}
            {%- else -%}
                {{- label|trim|trans(label_translation_parameters, translation_domain)|raw -}}
            {%- endif -%}
        {%- endif -%}
        {% if required %}
            <span class="required"></span>
        {% endif %}
    {% endapply %}
{%- endblock form_label_content -%}
